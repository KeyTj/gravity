// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moiot/gravity/pkg/inputs/helper/binlog_checker (interfaces: BinlogChecker)

// Package mock_binlog_checker is a generated GoMock package.
package mock_binlog_checker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	binlog_checker "github.com/moiot/gravity/pkg/inputs/helper/binlog_checker"
)

// MockBinlogChecker is a mock of BinlogChecker interface
type MockBinlogChecker struct {
	ctrl     *gomock.Controller
	recorder *MockBinlogCheckerMockRecorder
}

// MockBinlogCheckerMockRecorder is the mock recorder for MockBinlogChecker
type MockBinlogCheckerMockRecorder struct {
	mock *MockBinlogChecker
}

// NewMockBinlogChecker creates a new mock instance
func NewMockBinlogChecker(ctrl *gomock.Controller) *MockBinlogChecker {
	mock := &MockBinlogChecker{ctrl: ctrl}
	mock.recorder = &MockBinlogCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBinlogChecker) EXPECT() *MockBinlogCheckerMockRecorder {
	return m.recorder
}

// IsEventBelongsToMySelf mocks base method
func (m *MockBinlogChecker) IsEventBelongsToMySelf(arg0 binlog_checker.Row) bool {
	ret := m.ctrl.Call(m, "IsEventBelongsToMySelf", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEventBelongsToMySelf indicates an expected call of IsEventBelongsToMySelf
func (mr *MockBinlogCheckerMockRecorder) IsEventBelongsToMySelf(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEventBelongsToMySelf", reflect.TypeOf((*MockBinlogChecker)(nil).IsEventBelongsToMySelf), arg0)
}

// MarkActive mocks base method
func (m *MockBinlogChecker) MarkActive(arg0 binlog_checker.Row) {
	m.ctrl.Call(m, "MarkActive", arg0)
}

// MarkActive indicates an expected call of MarkActive
func (mr *MockBinlogCheckerMockRecorder) MarkActive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkActive", reflect.TypeOf((*MockBinlogChecker)(nil).MarkActive), arg0)
}

// Start mocks base method
func (m *MockBinlogChecker) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockBinlogCheckerMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBinlogChecker)(nil).Start))
}

// Stop mocks base method
func (m *MockBinlogChecker) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockBinlogCheckerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBinlogChecker)(nil).Stop))
}
